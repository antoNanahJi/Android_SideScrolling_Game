package zerotrigger.game2011.georgebrown.ca.zerotrigger;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

import java.util.ArrayList;

/**
 * Created by andre on 4/13/2018.
 */

class BackgroundView extends SurfaceView implements Runnable{

    ArrayList<Background> backgrounds;

    private volatile boolean running;
    private Thread gameThread = null;

    // For drawing
    private Paint paint;
    private Canvas canvasbg;
    private SurfaceHolder ourHolder;

    // Holds a reference to the Activity
    Context context;

    // Control the fps
    long fps = 60;

    // Screen resolution
    int screenWidth;
    int screenHeight;

    BackgroundView(Context context, int screenWidth, int screenHeight){
        super(context);

        this.context = context;

        this.screenWidth = screenWidth;
        this.screenHeight = screenHeight;

        // Initialize our drawing objects
        ourHolder = getHolder();
        paint = new Paint();

        // load the bg data into the bg object and place them in our gameobject arraylist
        backgrounds.add(new Background(
                this.context,
                screenWidth,
                screenHeight,
                "background", 0,80, 50));


    }

    private void drawBackground(int position) {

        // Make a copy of the relevant background
        Background bg = backgrounds.get(position);

        // define what portion of images to capture and
        // what coordinates of screen to draw them at

        // For the regular bitmap
        Rect fromRect1 = new Rect(0, 0, bg.width - bg.xClip, bg.height);
        Rect toRect1 = new Rect(bg.xClip, bg.startY, bg.width, bg.endY);

        // For the reversed background
        Rect fromRect2 = new Rect(bg.width - bg.xClip, 0, bg.width, bg.height);
        Rect toRect2 = new Rect(0, bg.startY, bg.xClip, bg.endY);

        //draw the two background bitmaps
        if (!bg.reversedFirst) {
            canvasbg.drawBitmap(bg.bitmap, fromRect1, toRect1, paint);
            canvasbg.drawBitmap(bg.bitmapReversed, fromRect2, toRect2, paint);
        } else {
            canvasbg.drawBitmap(bg.bitmap, fromRect2, toRect2, paint);
            canvasbg.drawBitmap(bg.bitmapReversed, fromRect1, toRect1, paint);
        }

    }


    @Override
    public void run()
    {
        while(running)
        {
            long startFrameTime = System.currentTimeMillis();

            update();

            drawing();

            // Calculate fps this frame
            long timeThisFrame = System.currentTimeMillis() - startFrameTime;
            if(timeThisFrame  >= 1){
                fps = 1000 / timeThisFrame;
            }
        }
    }

    private void update()
    {
        // update bg positions
        for (Background bg : backgrounds)
        {
            bg.update(fps);
        }
    }

    private void drawing()
    {
        if(ourHolder.getSurface().isValid())
        {
            // First we lock the are of memory we will be drawing to
            canvasbg = ourHolder.lockCanvas();

            // draw a bg color
            canvasbg.drawColor(Color.argb(255, 0 , 3, 70));

            // Draw the bg view
            drawBackground(0);

            // draw a background color
            canvasbg.drawColor(Color.argb(255, 255, 255, 255));
            canvasbg.drawText("I am a plane", 350, screenHeight / 100*5, paint);
            paint.setTextSize(220);
            canvasbg.drawText("I'm a train", 50, screenHeight / 100*80, paint);

            // draw foreground

            // Unlock and draw the scene
            ourHolder.unlockCanvasAndPost(canvasbg);
        }
    }

    public void pause(){
        running = false;
        try{
            gameThread.join();
        }catch (InterruptedException e){
            // error
        }
    }

    public void resume() {
        running = true;
        gameThread = new Thread(this);
        gameThread.start();
    }
}
